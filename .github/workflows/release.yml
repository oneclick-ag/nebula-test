on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]*'

name: Create release and upload binaries

jobs:
  build-linux:
    name: Build Linux amd64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Build
        run: |
          make BUILD_NUMBER="${GITHUB_REF#refs/tags/v}" release-linux-amd64
          tar -zcv -C build/linux-amd64 -f build/oneclick-mesh-client-only-linux-amd64.tar.gz oneclick-mesh-client
          tar -zcv -C build/linux-amd64 -f build/oneclick-mesh-client-cert-only-linux-amd64.tar.gz oneclick-mesh-client-cert
          mkdir release
          mv build/*.tar.gz release

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-latest
          path: release

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Build
        run: |
          echo $Env:GITHUB_REF.Substring(11)
          mkdir build\windows-amd64
          $Env:GOARCH = "amd64"
          go build -trimpath -ldflags "-X main.Build=$($Env:GITHUB_REF.Substring(11))" -o build\windows-amd64\oneclick-mesh-client.exe ./cmd/nebula-service
          mkdir build\windows-arm64
          $Env:GOARCH = "arm64"
          go build -trimpath -ldflags "-X main.Build=$($Env:GITHUB_REF.Substring(11))" -o build\windows-arm64\oneclick-mesh-client.exe ./cmd/nebula-service
          mkdir build\dist\windows
          mv dist\windows\wintun build\dist\windows\

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-latest
          path: build

  build-darwin:
    name: Build Universal Darwin
    env:
      HAS_SIGNING_CREDS: ${{ secrets.AC_USERNAME != '' }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Import application certificate
        if: env.HAS_SIGNING_CREDS == 'true'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Build, sign, and notarize
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          rm -rf release
          mkdir release
          make BUILD_NUMBER="${GITHUB_REF#refs/tags/v}" service build/darwin-amd64/oneclick-mesh-client
          make BUILD_NUMBER="${GITHUB_REF#refs/tags/v}" service build/darwin-arm64/oneclick-mesh-client
          lipo -create -output ./release/oneclick-mesh-client ./build/darwin-amd64/oneclick-mesh-client ./build/darwin-arm64/oneclick-mesh-client

          if [ -n "$AC_USERNAME" ]; then
            codesign -s "F2C1E03492179A729ABB455D7E181B7F4E2E0334" -f -v --timestamp --options=runtime -i "oneclick.oneclick-mesh-client" ./release/oneclick-mesh-client
          fi

          zip -j release/oneclick-mesh-client-only-darwin.zip release/oneclick-mesh-client

          if [ -n "$AC_USERNAME" ]; then
            xcrun notarytool submit ./release/oneclick-mesh-client-only-darwin.zip --team-id "6F8PY896LX" --apple-id "$AC_USERNAME" --password "$AC_PASSWORD" --wait
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: darwin-latest
          path: ./release/*

  release:
    name: Create and Upload Release
    needs: [build-linux, build-darwin, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Zip Windows agent only
        run: |
          cd artifacts/windows-latest
          cp windows-amd64/* .
          zip -r oneclick-mesh-client-only-windows-amd64.zip oneclick-mesh-client.exe dist
          cp windows-arm64/* .
          zip -r oneclick-mesh-client-only-windows-arm64.zip oneclick-mesh-client.exe dist

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          gh release create \
            --verify-tag \
            --title "Release ${{ github.ref_name }}" \
            "${{ github.ref_name }}" \
            *-latest/*.zip *-latest/*.tar.gz